# Generated by Django 5.2.4 on 2025-08-09 09:17

import ckeditor.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=120, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the category.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=120, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('blogImage', models.ImageField(blank=True, null=True, upload_to='blogs_upload/')),
                ('blogTitle', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('blogDescription', ckeditor.fields.RichTextField()),
                ('blogExcerpt', models.TextField(blank=True, help_text='Short summary for previews & SEO.', max_length=500)),
                ('metaTitle', models.CharField(blank=True, help_text='SEO meta title.', max_length=255)),
                ('metaDescription', models.CharField(blank=True, help_text='SEO meta description.', max_length=300)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('blogCategory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='core_b.category')),
                ('blogTags', models.ManyToManyField(blank=True, related_name='blog_posts', to='core_b.tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('comment', models.TextField()),
                ('is_approved', models.BooleanField(default=False, help_text='Only approved comments will be visible publicly.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment_on_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_b.comments')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core_b.blogpost')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
